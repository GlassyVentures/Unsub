// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Onboard {
  email     String  @id
  onboarded Boolean @default(false)

  @@unique([email])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.VarChar(2000) // To prevent length error.
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model SubscriptionBatch {
  id           String         @id @default(cuid())
  userId       String
  userEmail    String
  timestamp    DateTime       @default(now())
  user         User           @relation(fields: [userId, userEmail], references: [id, email])
  Subscription Subscription[]
}

model Subscription {
  id           String            @id @default(cuid())
  batchId      String
  userId       String
  company      String
  originEmail  String
  userEmail    String
  unsubscribe  String            @db.VarChar(2000)
  unsubscribed Boolean           @default(false)
  user         User              @relation(fields: [userId, userEmail], references: [id, email])
  batch        SubscriptionBatch @relation(fields: [batchId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  earlyAccess       Boolean             @default(false)
  accounts          Account[]
  sessions          Session[]
  Subscription      Subscription[]
  SubscriptionBatch SubscriptionBatch[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
